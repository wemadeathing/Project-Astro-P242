---
---

<canvas id="heroAnimation" class="absolute inset-0 -z-10 opacity-30"></canvas>

<script>
class Particle {
  x: number;
  y: number;
  size: number;
  speedX: number;
  speedY: number;

  constructor(x: number, y: number) {
    this.x = x;
    this.y = y; 
    this.size = Math.random() * 2 + 0.5;
    this.speedX = Math.random() * 2 - 1;
    this.speedY = Math.random() * 2 - 1;
  }

  update() {
    this.x += this.speedX;
    this.y += this.speedY;

    if (this.size > 0.2) this.size -= 0.01;
  }

  draw(ctx) {
    ctx.fillStyle = 'hsl(265, 89%, 78%)';
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
    ctx.fill();
  }
}

class ParticleNetwork {
  canvas: HTMLCanvasElement;
  ctx: CanvasRenderingContext2D;
  particles: Particle[];
  numberOfParticles: number;
  connectDistance: number;

  constructor(canvas: HTMLCanvasElement) {
    this.canvas = canvas;
    this.ctx = canvas.getContext('2d')!;
    this.particles = [];
    this.numberOfParticles = 100;
    this.connectDistance = 100;
    this.init();

    window.addEventListener('resize', () => this.resize());
    this.resize();
    this.animate();
  }

  init() {
    for (let i = 0; i < this.numberOfParticles; i++) {
      const x = Math.random() * this.canvas.width;
      const y = Math.random() * this.canvas.height;
      this.particles.push(new Particle(x, y));
    }
  }

  resize() {
    this.canvas.width = window.innerWidth;
    this.canvas.height = window.innerHeight;
  }

  animate() {
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    
    this.particles.forEach((particle, index) => {
      particle.update();
      particle.draw(this.ctx);

      // Check boundaries and reset position
      if (particle.x < 0 || particle.x > this.canvas.width) {
        particle.x = Math.random() * this.canvas.width;
      }
      if (particle.y < 0 || particle.y > this.canvas.height) {
        particle.y = Math.random() * this.canvas.height;
      }

      // Connect particles
      for (let j = index + 1; j < this.particles.length; j++) {
        const dx = particle.x - this.particles[j].x;
        const dy = particle.y - this.particles[j].y;
        const distance = Math.sqrt(dx * dx + dy * dy);

        if (distance < this.connectDistance) {
          this.ctx.beginPath();
          this.ctx.strokeStyle = `hsla(265, 89%, 78%, ${1 - distance/this.connectDistance})`;
          this.ctx.lineWidth = 0.5;
          this.ctx.moveTo(particle.x, particle.y);
          this.ctx.lineTo(this.particles[j].x, this.particles[j].y);
          this.ctx.stroke();
        }
      }
    });

    requestAnimationFrame(() => this.animate());
  }
}

// Initialize animation when the document is ready
document.addEventListener('DOMContentLoaded', () => {
  const canvas = document.getElementById('heroAnimation') as HTMLCanvasElement;
  if (canvas) {
    new ParticleNetwork(canvas);
  }
});
</script>