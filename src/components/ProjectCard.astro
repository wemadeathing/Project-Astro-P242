---
interface Props {
  title: string;
  description: string;
  image: string;
  tags: string[];
  slug: string;
}

const { title, description, image, tags, slug } = Astro.props;

const truncateText = (text: string, maxLength: number) => {
  return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
};

const truncatedTitle = truncateText(title, 40);
const truncatedDescription = truncateText(description, 100);
const visibleTags = tags.slice(0, 3);
---

<a href={`/projects/${slug}`} class="group block h-full">
  <div class="relative h-full overflow-hidden rounded-xl bg-secondary/50 backdrop-blur-sm border border-secondary hover-card">
    <div class="aspect-video overflow-hidden">
      <img
        src={image}
        alt={title}
        class="h-full w-full object-cover transition-transform duration-500 group-hover:scale-105"
      />
    </div>
    <div class="p-6">
      <h3 class="text-xl font-semibold mb-2 text-foreground group-hover:text-primary transition-colors">
        {truncatedTitle}
      </h3>
      <p class="text-muted-foreground mb-4">{truncatedDescription}</p>
      <div class="flex flex-wrap gap-2">
        {visibleTags.map((tag) => (
          <span class="inline-flex items-center rounded-full bg-primary/20 backdrop-blur-sm px-3 py-1 text-xs text-primary">
            {tag}
          </span>
        ))}
        {tags.length > 3 && (
          <span class="inline-flex items-center rounded-full bg-primary/20 backdrop-blur-sm px-3 py-1 text-xs text-primary">
            +{tags.length - 3} more
          </span>
        )}
      </div>
    </div>
  </div>
</a>